name: CI + Release

on:
  push:
    branches: [ "main", "test" ]
    tags:
      - '*'
  pull_request:
    branches: [ "main", "test" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: linux
            arch: 386
          - os: linux
            arch: arm
          - os: linux
            arch: ppc64le
          - os: linux
            arch: riscv64
          - os: windows
            arch: amd64
          - os: windows
            arch: 386
          - os: windows
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: freebsd
            arch: amd64
          - os: freebsd
            arch: 386
          - os: freebsd
            arch: arm64
          - os: netbsd
            arch: amd64
          - os: netbsd
            arch: 386
          - os: netbsd
            arch: arm64
          - os: openbsd
            arch: amd64
          - os: openbsd
            arch: 386
          - os: openbsd
            arch: arm64
          - os: android
            arch: amd64
          - os: android
            arch: arm64
          - os: android
            arch: 386
          - os: android
            arch: arm
    env:
      GOOS: ${{ matrix.os }}
      GOARCH: ${{ matrix.arch }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'

      - name: Install dependencies (fpm, dpkg, appimage)
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential dpkg-dev libfuse2
          sudo gem install --no-document fpm
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          sudo mv appimagetool-x86_64.AppImage /usr/local/bin/appimagetool

      - name: Build binary
        run: |
          mkdir -p dist
          EXT=""
          if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi

          if [ "$GOOS" = "android" ]; then
            export CGO_ENABLED=1
          else
            export CGO_ENABLED=0
          fi

          go build -o dist/aether-${GOOS}_${GOARCH}${EXT} ./cmd/aether2/

      - name: Package formats for Linux
        if: matrix.os == 'linux'
        run: |
          mkdir -p dist/pkgroot/usr/local/bin
          cp dist/aether-${GOOS}_${GOARCH} dist/pkgroot/usr/local/bin/aether

          mkdir -p dist/deb/DEBIAN
          cat > dist/deb/DEBIAN/control <<EOF
          Package: aether
          Version: 1.0.0
          Section: base
          Priority: optional
          Architecture: ${GOARCH}
          Maintainer: Aether Dev <noreply@aether.org>
          Description: Aether Programming Language Binary
          EOF
          mkdir -p dist/deb/usr/local/bin
          cp dist/aether-${GOOS}_${GOARCH} dist/deb/usr/local/bin/aether
          dpkg-deb --build dist/deb dist/aether-${GOOS}_${GOARCH}.deb

          fpm -s dir -t rpm -n aether -v 1.0.0 --architecture ${GOARCH} --prefix /usr/local/bin -p dist/aether-${GOOS}_${GOARCH}.rpm dist/aether-${GOOS}_${GOARCH}=/usr/local/bin/aether

          if [ "$GOARCH" != "riscv64" ] && [ "$GOARCH" != "ppc64le" ]; then
            mkdir -p AppDir/usr/bin
            cp dist/aether-${GOOS}_${GOARCH} AppDir/usr/bin/aether
            cp assets/icon-256x256.png AppDir/icon-256x256.png
            cat > AppDir/aether.desktop <<EOF
          [Desktop Entry]
          Name=Aether
          Exec=aether
          Icon=icon-256x256
          Type=Application
          Categories=Development;
          EOF

            ARCH="$GOARCH"
            if [ "$GOARCH" = "amd64" ]; then ARCH="x86_64"; fi
            if [ "$GOARCH" = "386" ]; then ARCH="i686"; fi
            if [ "$GOARCH" = "arm" ]; then ARCH="armhf"; fi
            if [ "$GOARCH" = "arm64" ]; then ARCH="arm_aarch64"; fi
            if [ "$GOARCH" = "ppc64le" ]; then ARCH="ppc64le"; fi

            export ARCH
            appimagetool AppDir dist/aether-"${GOOS}"_"${GOARCH}".appimage
          else
            echo "Skipping AppImage build for $GOARCH - not supported"
          fi

          mkdir -p tarball
          cp dist/aether-${GOOS}_${GOARCH} tarball/aether
          tar -cvf dist/aether-${GOOS}_${GOARCH}.tar -C tarball aether

      - name: Package formats for macOS
        if: matrix.os == 'darwin'
        run: |
          EXT=""
          BIN=dist/aether-${GOOS}_${GOARCH}${EXT}
          mkdir -p dist/macos_pkgroot/usr/local/bin
          cp "$BIN" dist/macos_pkgroot/usr/local/bin/aether

          pkgbuild \
            --identifier org.aether.pkg \
            --version 1.0.0 \
            --install-location /usr/local/bin \
            --root dist/macos_pkgroot/usr/local/bin \
            dist/aether-${GOOS}_${GOARCH}.pkg

          mkdir -p dmg
          cp "$BIN" dmg/aether
          hdiutil create -volname Aether \
            -srcfolder dmg \
            -ov \
            -format UDZO \
            dist/aether-${GOOS}_${GOARCH}.dmg

          mkdir -p tarball
          cp "$BIN" tarball/aether
          tar -cvf dist/aether-${GOOS}_${GOARCH}.tar -C tarball aether

      - name: Package formats for BSD and Android
        if: contains('freebsd netbsd openbsd android', matrix.os)
        run: |
          EXT=""
          if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi

          mkdir -p tarball
          cp dist/aether-${GOOS}_${GOARCH}${EXT} tarball/aether
          tar -cvf dist/aether-${GOOS}_${GOARCH}.tar -C tarball aether

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aether-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/aether-${{ matrix.os }}_${{ matrix.arch }}
            dist/aether-${{ matrix.os }}_${{ matrix.arch }}.tar
            dist/aether-${{ matrix.os }}_${{ matrix.arch }}.deb
            dist/aether-${{ matrix.os }}_${{ matrix.arch }}.rpm
            dist/aether-${{ matrix.os }}_${{ matrix.arch }}.appimage
            dist/aether-${{ matrix.os }}_${{ matrix.arch }}.pkg
            dist/aether-${{ matrix.os }}_${{ matrix.arch }}.dmg
            dist/aether-${{ matrix.os }}_${{ matrix.arch }}.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List downloaded files
        run: ls -R dist

      - name: Flatten artifacts
        run: |
          mkdir flat
          find dist -type f -exec cp {} flat/ \;
          rm -rf dist
          mv flat dist

      - name: Create GitHub Release and upload files
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: dist/*
          draft: false
          prerelease: ${{ contains(github.ref_name, 'nightly') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
